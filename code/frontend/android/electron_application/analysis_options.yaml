# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # 启用规则
    prefer_const_constructors: true
    prefer_const_declarations: true
    prefer_single_quotes: true
    avoid_print: true  # 使用Logger而非print
    use_key_in_widget_constructors: true
    always_use_package_imports: true

    # 禁用一些不需要的规则
    prefer_const_literals_to_create_immutables: false
    library_private_types_in_public_api: false  # 允许使用_State类型
    use_build_context_synchronously: false  # 允许在异步操作后使用BuildContext

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

# 自定义分析器选项
analyzer:
  errors:
    # 将一些警告视为错误
    invalid_assignment: error
    
    # 将一些错误视为警告
    deprecated_member_use: warning
    
    # 禁用一些不需要的警告
    dead_code: ignore
    unused_import: ignore # 我们将手动处理未使用的导入
